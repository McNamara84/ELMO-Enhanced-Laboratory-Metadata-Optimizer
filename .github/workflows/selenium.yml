name: Selenium Tests
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  selenium:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: mde2-msl-test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
          --health-start-period=30s
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, zip
        coverage: xdebug
        
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Composer dependencies
      run: |
        composer install --prefer-dist --no-progress --no-suggest
        composer dump-autoload -o
        
    - name: Wait for MySQL to be ready
      run: |
        echo "Waiting for MySQL to be ready..."
        for i in {1..60}; do
          if mysqladmin ping -h127.0.0.1 -P3306 -uroot -proot_password --silent; then
            echo "MySQL is ready!";
            break;
          fi;
          echo "Attempt $i: Waiting for MySQL...";
          sleep 3;
        done
        # Test connection
        mysql -h127.0.0.1 -P3306 -uroot -proot_password -e "SELECT 1;" || exit 1
        
    - name: Set up database
      run: |
        echo "Setting up database users and permissions..."
        mysql -h127.0.0.1 -P3306 -uroot -proot_password -e "
          SELECT 'Database connection successful' as status;
          CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'test_password';
          GRANT ALL PRIVILEGES ON *.* TO 'test_user'@'%';
          FLUSH PRIVILEGES;
          SHOW DATABASES;
        "
        
    - name: Create settings.php and install
      run: |
        echo "Creating settings.php..."
        cat << 'EOF' > settings.php
        <?php
        error_reporting(E_ALL);
        ini_set('display_errors', 1);
        
        function connectDb() {
            $host = '127.0.0.1';
            $port = '3306';
            $username = 'test_user';
            $password = 'test_password';
            $database = 'mde2-msl-test';
            
            $conn = new mysqli($host, $username, $password, $database, $port);
            
            if ($conn->connect_error) {
                die("Connection failed: " . $conn->connect_error);
            }
            
            return $conn;
        }
        
        function getApiKey() {
            $apiKeyGoogleMaps = 'test_api_key';
            echo json_encode(['apiKey' => $apiKeyGoogleMaps]);
        }
        
        if (basename(__FILE__) == basename($_SERVER['PHP_SELF'])) {
            if ($_SERVER['REQUEST_METHOD'] === 'GET') {
                getApiKey();
            }
        }
        
        $connection = connectDb();
        $apiKeyTimezone = 'test_timezone_api_key';
        $maxTitles = 2;
        $mslLabsUrl = 'https://raw.githubusercontent.com/UtrechtUniversity/msl_vocabularies/main/vocabularies/labs/labnames.json';
        $showFeedbackLink = true;
        $smtpHost = 'smtp.test.de';
        $smtpPort = 465;
        $smtpUser = 'test_user';
        $smtpPassword = 'test_password';
        $smtpSender = 'test_sender@test.com';
        $feedbackAddress = 'feedback@test.com';
        ?>
        EOF
        
        echo "Running install.php..."
        php install.php > install_output.log 2>&1 || true
        
        echo "Installation output:"
        cat install_output.log
        
    - name: Verify database setup
      run: |
        echo "Verifying database tables..."
        mysql -h127.0.0.1 -P3306 -utest_user -ptest_password mde2-msl-test -e "SHOW TABLES;"
        
    - name: Start PHP development server
      run: |
        echo "Starting PHP development server..."
        php -S 127.0.0.1:8000 -t . > php_server.log 2>&1 &
        echo $! > php_server.pid
        
        # Wait for PHP server to start
        for i in {1..30}; do
          if curl -s http://127.0.0.1:8000/ > /dev/null 2>&1; then
            echo "PHP server is ready!";
            break;
          fi;
          echo "Waiting for PHP server... ($i/30)";
          sleep 2;
        done
        
    - name: Start Selenium standalone
      run: |
        echo "Starting Selenium standalone server..."
        # Download Selenium standalone
        wget -q https://github.com/SeleniumHQ/selenium/releases/download/selenium-4.15.0/selenium-server-4.15.0.jar -O selenium-server.jar
        
        # Start Selenium server in background
        java -jar selenium-server.jar standalone --port 4444 > selenium.log 2>&1 &
        echo $! > selenium.pid
        
        # Wait for Selenium to be ready
        for i in {1..60}; do
          if curl -s http://127.0.0.1:4444/wd/hub/status > /dev/null 2>&1; then
            echo "Selenium server is ready!";
            break;
          fi;
          echo "Waiting for Selenium server... ($i/60)";
          sleep 2;
        done
        
    - name: Install Chrome browser
      run: |
        # Update package list
        sudo apt-get update
        
        # Install Chrome
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Install ChromeDriver
        CHROME_VERSION=$(google-chrome --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
        echo "Chrome version: $CHROME_VERSION"
        
        # Download matching ChromeDriver
        wget -q "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION%.*}" -O chrome_version.txt
        CHROMEDRIVER_VERSION=$(cat chrome_version.txt)
        echo "ChromeDriver version: $CHROMEDRIVER_VERSION"
        
        wget -q "https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
        unzip chromedriver_linux64.zip
        sudo mv chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        
    - name: Install Selenium Dependencies
      run: |
        npm install -g selenium-side-runner@3.17.0
        
    - name: Test connectivity
      run: |
        echo "Testing PHP application..."
        curl -v http://127.0.0.1:8000/ | head -20
        
        echo "Testing Selenium server..."
        curl -s http://127.0.0.1:4444/wd/hub/status | jq '.' || echo "Selenium status check failed"
        
        echo "Testing database connection..."
        mysql -h127.0.0.1 -P3306 -utest_user -ptest_password mde2-msl-test -e "SELECT 'Database OK' as status;"
        
    - name: Update Selenium test base URL
      run: |
        # Update the test file to use correct base URL
        sed -i 's|"url": "http://php-app:8000"|"url": "http://127.0.0.1:8000"|g' tests/SeleniumTests/Tests_MDE.side
        echo "Updated test base URL"
        
    - name: Run Selenium tests
      run: |
        echo "Running Selenium tests..."
        selenium-side-runner \
          --debug \
          --browser chrome \
          --server http://127.0.0.1:4444/wd/hub \
          --base-url http://127.0.0.1:8000 \
          --timeout 60000 \
          tests/SeleniumTests/Tests_MDE.side
          
    - name: Show debug info on failure
      if: failure()
      run: |
        echo "=== PHP Server Logs ==="
        cat php_server.log || echo "No PHP server log found"
        
        echo "=== Selenium Server Logs ==="
        cat selenium.log || echo "No Selenium log found"
        
        echo "=== Installation Logs ==="
        cat install_output.log || echo "No install log found"
        
        echo "=== Process Status ==="
        ps aux | grep -E "(php|java|selenium)" || true
        
        echo "=== Network Status ==="
        netstat -tlnp | grep -E "(3306|4444|8000)" || true
        
        echo "=== Chrome Version ==="
        google-chrome --version || echo "Chrome not found"
        chromedriver --version || echo "ChromeDriver not found"
        
        echo "=== PHP Version ==="
        php --version
        
        echo "=== Database Status ==="
        mysql -h127.0.0.1 -P3306 -uroot -proot_password -e "SHOW PROCESSLIST;" || echo "Cannot connect to MySQL"
        
    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: logs-and-results
        path: |
          *.log
          *.php
          tests/
          
    - name: Cleanup
      if: always()
      run: |
        # Kill PHP server
        if [ -f php_server.pid ]; then
          kill $(cat php_server.pid) || true
        fi
        
        # Kill Selenium server
        if [ -f selenium.pid ]; then
          kill $(cat selenium.pid) || true
        fi
        
        # Clean up downloads
        rm -f selenium-server.jar chromedriver_linux64.zip chrome_version.txt