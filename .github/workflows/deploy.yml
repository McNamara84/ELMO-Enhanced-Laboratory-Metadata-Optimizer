name: Build and Deploy to Portainer

on:
  push:
    branches: 
      - main
      - fix/portainer-deployment  # F√ºr Tests
  pull_request:
    branches: 
      - main
    types: [opened, synchronize, reopened]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/elmo

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: write  # F√ºr PR-Kommentare

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=test-{{branch}},enable=${{ github.ref == 'refs/heads/fix/portainer-deployment' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Comment PR with image info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### üê≥ Docker Image Built Successfully
            
            **Image Tags:**
            \`\`\`
            ${{ steps.meta.outputs.tags }}
            \`\`\`
            
            **Pull this image locally:**
            \`\`\`bash
            docker pull ghcr.io/${{ github.repository_owner }}/elmo:pr-${{ github.event.pull_request.number }}
            \`\`\`
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    # Nur deployen wenn: main branch ODER fix/portainer-deployment branch ODER PR mit deploy Label
    if: |
      github.ref == 'refs/heads/main' || 
      github.ref == 'refs/heads/fix/portainer-deployment' ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy'))
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set deployment environment
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "stack_name=elmo-production" >> $GITHUB_OUTPUT
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/fix/portainer-deployment" ]]; then
            echo "environment=test" >> $GITHUB_OUTPUT
            echo "stack_name=elmo-test" >> $GITHUB_OUTPUT
            echo "image_tag=test-fix-portainer-deployment" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "environment=preview" >> $GITHUB_OUTPUT
            echo "stack_name=elmo-pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "image_tag=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Portainer via Webhook
        if: steps.set-env.outputs.environment == 'production'
        run: |
          echo "Deploying to production environment..."
          curl -X POST "${{ secrets.PORTAINER_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            --fail-with-body

      - name: Deploy to Test Environment
        if: steps.set-env.outputs.environment == 'test' || steps.set-env.outputs.environment == 'preview'
        run: |
          echo "Deploying to ${{ steps.set-env.outputs.environment }} environment..."
          echo "Stack: ${{ steps.set-env.outputs.stack_name }}"
          echo "Image: ghcr.io/${{ github.repository_owner }}/elmo:${{ steps.set-env.outputs.image_tag }}"
          
          # Hier w√ºrdest du den Test-Deployment-Code einf√ºgen
          # Falls du einen separaten Test-Webhook hast:
          if [[ -n "${{ secrets.PORTAINER_TEST_WEBHOOK_URL }}" ]]; then
            curl -X POST "${{ secrets.PORTAINER_TEST_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{"image_tag": "${{ steps.set-env.outputs.image_tag }}"}' \
              --fail-with-body
          else
            echo "‚ö†Ô∏è Test deployment webhook not configured. Skipping actual deployment."
            echo "‚ÑπÔ∏è Image is available at: ghcr.io/${{ github.repository_owner }}/elmo:${{ steps.set-env.outputs.image_tag }}"
          fi

      - name: Comment PR with deployment info
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### üöÄ Deployment Status
            
            **Environment:** \`${{ steps.set-env.outputs.environment }}\`
            **Stack Name:** \`${{ steps.set-env.outputs.stack_name }}\`
            **Image Tag:** \`${{ steps.set-env.outputs.image_tag }}\`
            
            ${context.payload.pull_request.labels.some(l => l.name === 'deploy') 
              ? '‚úÖ Deployed to test environment' 
              : '‚ÑπÔ∏è Add the `deploy` label to this PR to trigger deployment to test environment'}
            
            *Deployment triggered by: @${{ github.actor }}*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  # Optionaler Job f√ºr Cleanup nach PR-Schlie√üung
  cleanup:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup test deployment
        run: |
          echo "Cleaning up test deployment for PR #${{ github.event.pull_request.number }}"
          # Hier w√ºrdest du Code zum L√∂schen des Test-Stacks einf√ºgen