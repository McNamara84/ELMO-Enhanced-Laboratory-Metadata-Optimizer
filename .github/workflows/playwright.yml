name: Playwright Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  playwright-tests:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: mde2-msl-test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - uses: actions/checkout@v4

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, mysqli, zip
        tools: phpdbg

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-progress --no-suggest
        composer dump-autoload -o
        npm install

    - name: Wait for MySQL to be ready
      run: |
        for i in {30..0}; do
          if mysqladmin ping -h127.0.0.1 --silent; then
            break
          fi
          echo 'Waiting for MySQL...'
          sleep 5
        done
        if [ "$i" = 0 ]; then
          echo >&2 'MySQL did not start in time.'
          exit 1
        fi

    - name: Grant privileges to test_user
      run: |
        mysql -h127.0.0.1 -uroot -proot_password -e "
          CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'test_password';
          GRANT ALL PRIVILEGES ON *.* TO 'test_user'@'%';
          FLUSH PRIVILEGES;
        "

    - name: Create settings.php
      run: |
        cat << EOF > settings.php
        <?php
        function connectDb() {
            \$host = '127.0.0.1';
            \$username = 'test_user';
            \$password = 'test_password';
            \$database = 'mde2-msl-test';
            \$conn = new mysqli(\$host, \$username, \$password, \$database);
            return \$conn;
        }
        function getApiKey() {
            \$apiKeyGoogleMaps = 'test_api_key';
            echo json_encode(['apiKey' => \$apiKeyGoogleMaps]);
        }
        if (basename(__FILE__) == basename(\$_SERVER['PHP_SELF'])) {
            if (\$_SERVER['REQUEST_METHOD'] === 'GET') {
                getApiKey();
            }
        }
        \$connection = connectDb();
        \$apiKeyElmo = '1234-1234-1234-1234';
        \$apiKeyTimezone = 'test_timezone_api_key';
        \$maxTitles = 2;
        \$mslLabsUrl = 'https://raw.githubusercontent.com/UtrechtUniversity/msl_vocabularies/main/vocabularies/labs/labnames.json';
        \$showFeedbackLink = true;
        \$smtpHost = 'smtp.test.de';
        \$smtpPort = 465;
        \$smtpUser = 'test_user';
        \$smtpPassword = 'test_password';
        \$smtpSender = 'test_sender@test.com';
        \$feedbackAddress = 'feedback@test.com';
        EOF

    - name: Initialize database structure and lookup data
      run: php -r "require 'install.php'; createDatabaseStructure(\$connection); insertLookupData(\$connection);"

    - name: Start PHP built-in web server
      run: |
        php -S localhost:8000 -t . tests/server.php 2>&1 > server.log &
        echo $! > server.pid
        sleep 10
        
        echo "Testing initial API endpoints:"
        curl -v http://localhost:8000/elmo/api/v2/general/alive || echo "API endpoint test failed"
        echo "\nTesting licenses endpoint:"
        curl -v http://localhost:8000/elmo/api/v2/vocabs/licenses/all || echo "Licenses endpoint test failed"
        
        echo "\nTesting main page:"
        curl -v http://localhost:8000/elmo/ || echo "Main page test failed"
        
        echo "\nInitial server log contents:"
        cat server.log

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Verify server is running
      run: |
        echo "Checking if server is running..."
        ps aux | grep php || echo "No PHP processes found"
        
        echo "Testing server connectivity..."
        for i in {1..10}; do
          if curl -s http://localhost:8000/elmo/ > /dev/null; then
            echo "Server is responding on attempt $i"
            break
          else
            echo "Server not responding on attempt $i, waiting..."
            sleep 2
          fi
        done
        
        echo "Final connectivity test:"
        curl -v http://localhost:8000/elmo/ || echo "Server still not reachable"

    - name: Create playwright.config.ts for CI
      run: |
        cat << EOF > playwright.config.ci.ts
        import { defineConfig, devices } from '@playwright/test';

        export default defineConfig({
          testDir: './tests/playwright',
          fullyParallel: true,
          forbidOnly: !!process.env.CI,
          retries: process.env.CI ? 2 : 0,
          workers: process.env.CI ? 1 : undefined,
          reporter: [['html', { outputFolder: 'playwright-report' }], ['json', { outputFile: 'test-results.json' }]],
          use: {
            baseURL: 'http://localhost:8000/elmo/',
            trace: 'on-first-retry',
            video: 'retain-on-failure',
            screenshot: 'only-on-failure',
          },
          projects: [
            {
              name: 'chromium',
              use: { ...devices['Desktop Chrome'] },
            },
            {
              name: 'firefox',
              use: { ...devices['Desktop Firefox'] },
            },
            {
              name: 'webkit',
              use: { ...devices['Desktop Safari'] },
            },
          ],
        });
        EOF

    - name: Run Playwright tests
      run: npx playwright test --config=playwright.config.ci.ts
      env:
        CI: true

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/
        retention-days: 30

    - name: Display server logs on failure
      if: failure()
      run: |
        echo "=== Server Log ==="
        cat server.log
        echo "=== PHP Error Log ==="
        if [ -f /var/log/php_errors.log ]; then
          cat /var/log/php_errors.log
        fi

    - name: Stop PHP server
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
        fi